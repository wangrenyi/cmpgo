// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/wangrenyi/kmpgo/proto/serviceaccount/serviceaccount.proto

/*
Package serviceaccount is a generated protocol buffer package.

It is generated from these files:
	github.com/wangrenyi/kmpgo/proto/serviceaccount/serviceaccount.proto

It has these top-level messages:
*/
package serviceaccount

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "github.com/wangrenyi/kmpgo/proto/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ServiceAccountInterface service

type ServiceAccountInterfaceClient interface {
	ServiceAccountCreate(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error)
	ServiceAccountUpdate(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error)
	ServiceAccountDelete(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error)
	ServiceAccountDeleteCollection(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error)
	ServiceAccountGet(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error)
	ServiceAccountList(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error)
	ServiceAccountWatch(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error)
	ServiceAccountPatch(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error)
	// ServiceAccount expansion
	ServiceAccountCreateToken(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error)
}

type serviceAccountInterfaceClient struct {
	cc *grpc.ClientConn
}

func NewServiceAccountInterfaceClient(cc *grpc.ClientConn) ServiceAccountInterfaceClient {
	return &serviceAccountInterfaceClient{cc}
}

func (c *serviceAccountInterfaceClient) ServiceAccountCreate(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error) {
	out := new(common.InvokeServiceResponse)
	err := grpc.Invoke(ctx, "/serviceaccount.ServiceAccountInterface/ServiceAccountCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceAccountInterfaceClient) ServiceAccountUpdate(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error) {
	out := new(common.InvokeServiceResponse)
	err := grpc.Invoke(ctx, "/serviceaccount.ServiceAccountInterface/ServiceAccountUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceAccountInterfaceClient) ServiceAccountDelete(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error) {
	out := new(common.InvokeServiceResponse)
	err := grpc.Invoke(ctx, "/serviceaccount.ServiceAccountInterface/ServiceAccountDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceAccountInterfaceClient) ServiceAccountDeleteCollection(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error) {
	out := new(common.InvokeServiceResponse)
	err := grpc.Invoke(ctx, "/serviceaccount.ServiceAccountInterface/ServiceAccountDeleteCollection", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceAccountInterfaceClient) ServiceAccountGet(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error) {
	out := new(common.InvokeServiceResponse)
	err := grpc.Invoke(ctx, "/serviceaccount.ServiceAccountInterface/ServiceAccountGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceAccountInterfaceClient) ServiceAccountList(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error) {
	out := new(common.InvokeServiceResponse)
	err := grpc.Invoke(ctx, "/serviceaccount.ServiceAccountInterface/ServiceAccountList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceAccountInterfaceClient) ServiceAccountWatch(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error) {
	out := new(common.InvokeServiceResponse)
	err := grpc.Invoke(ctx, "/serviceaccount.ServiceAccountInterface/ServiceAccountWatch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceAccountInterfaceClient) ServiceAccountPatch(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error) {
	out := new(common.InvokeServiceResponse)
	err := grpc.Invoke(ctx, "/serviceaccount.ServiceAccountInterface/ServiceAccountPatch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceAccountInterfaceClient) ServiceAccountCreateToken(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error) {
	out := new(common.InvokeServiceResponse)
	err := grpc.Invoke(ctx, "/serviceaccount.ServiceAccountInterface/ServiceAccountCreateToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ServiceAccountInterface service

type ServiceAccountInterfaceServer interface {
	ServiceAccountCreate(context.Context, *common.InvokeServiceRequest) (*common.InvokeServiceResponse, error)
	ServiceAccountUpdate(context.Context, *common.InvokeServiceRequest) (*common.InvokeServiceResponse, error)
	ServiceAccountDelete(context.Context, *common.InvokeServiceRequest) (*common.InvokeServiceResponse, error)
	ServiceAccountDeleteCollection(context.Context, *common.InvokeServiceRequest) (*common.InvokeServiceResponse, error)
	ServiceAccountGet(context.Context, *common.InvokeServiceRequest) (*common.InvokeServiceResponse, error)
	ServiceAccountList(context.Context, *common.InvokeServiceRequest) (*common.InvokeServiceResponse, error)
	ServiceAccountWatch(context.Context, *common.InvokeServiceRequest) (*common.InvokeServiceResponse, error)
	ServiceAccountPatch(context.Context, *common.InvokeServiceRequest) (*common.InvokeServiceResponse, error)
	// ServiceAccount expansion
	ServiceAccountCreateToken(context.Context, *common.InvokeServiceRequest) (*common.InvokeServiceResponse, error)
}

func RegisterServiceAccountInterfaceServer(s *grpc.Server, srv ServiceAccountInterfaceServer) {
	s.RegisterService(&_ServiceAccountInterface_serviceDesc, srv)
}

func _ServiceAccountInterface_ServiceAccountCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.InvokeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceAccountInterfaceServer).ServiceAccountCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serviceaccount.ServiceAccountInterface/ServiceAccountCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceAccountInterfaceServer).ServiceAccountCreate(ctx, req.(*common.InvokeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceAccountInterface_ServiceAccountUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.InvokeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceAccountInterfaceServer).ServiceAccountUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serviceaccount.ServiceAccountInterface/ServiceAccountUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceAccountInterfaceServer).ServiceAccountUpdate(ctx, req.(*common.InvokeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceAccountInterface_ServiceAccountDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.InvokeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceAccountInterfaceServer).ServiceAccountDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serviceaccount.ServiceAccountInterface/ServiceAccountDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceAccountInterfaceServer).ServiceAccountDelete(ctx, req.(*common.InvokeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceAccountInterface_ServiceAccountDeleteCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.InvokeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceAccountInterfaceServer).ServiceAccountDeleteCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serviceaccount.ServiceAccountInterface/ServiceAccountDeleteCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceAccountInterfaceServer).ServiceAccountDeleteCollection(ctx, req.(*common.InvokeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceAccountInterface_ServiceAccountGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.InvokeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceAccountInterfaceServer).ServiceAccountGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serviceaccount.ServiceAccountInterface/ServiceAccountGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceAccountInterfaceServer).ServiceAccountGet(ctx, req.(*common.InvokeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceAccountInterface_ServiceAccountList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.InvokeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceAccountInterfaceServer).ServiceAccountList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serviceaccount.ServiceAccountInterface/ServiceAccountList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceAccountInterfaceServer).ServiceAccountList(ctx, req.(*common.InvokeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceAccountInterface_ServiceAccountWatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.InvokeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceAccountInterfaceServer).ServiceAccountWatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serviceaccount.ServiceAccountInterface/ServiceAccountWatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceAccountInterfaceServer).ServiceAccountWatch(ctx, req.(*common.InvokeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceAccountInterface_ServiceAccountPatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.InvokeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceAccountInterfaceServer).ServiceAccountPatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serviceaccount.ServiceAccountInterface/ServiceAccountPatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceAccountInterfaceServer).ServiceAccountPatch(ctx, req.(*common.InvokeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceAccountInterface_ServiceAccountCreateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.InvokeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceAccountInterfaceServer).ServiceAccountCreateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serviceaccount.ServiceAccountInterface/ServiceAccountCreateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceAccountInterfaceServer).ServiceAccountCreateToken(ctx, req.(*common.InvokeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ServiceAccountInterface_serviceDesc = grpc.ServiceDesc{
	ServiceName: "serviceaccount.ServiceAccountInterface",
	HandlerType: (*ServiceAccountInterfaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ServiceAccountCreate",
			Handler:    _ServiceAccountInterface_ServiceAccountCreate_Handler,
		},
		{
			MethodName: "ServiceAccountUpdate",
			Handler:    _ServiceAccountInterface_ServiceAccountUpdate_Handler,
		},
		{
			MethodName: "ServiceAccountDelete",
			Handler:    _ServiceAccountInterface_ServiceAccountDelete_Handler,
		},
		{
			MethodName: "ServiceAccountDeleteCollection",
			Handler:    _ServiceAccountInterface_ServiceAccountDeleteCollection_Handler,
		},
		{
			MethodName: "ServiceAccountGet",
			Handler:    _ServiceAccountInterface_ServiceAccountGet_Handler,
		},
		{
			MethodName: "ServiceAccountList",
			Handler:    _ServiceAccountInterface_ServiceAccountList_Handler,
		},
		{
			MethodName: "ServiceAccountWatch",
			Handler:    _ServiceAccountInterface_ServiceAccountWatch_Handler,
		},
		{
			MethodName: "ServiceAccountPatch",
			Handler:    _ServiceAccountInterface_ServiceAccountPatch_Handler,
		},
		{
			MethodName: "ServiceAccountCreateToken",
			Handler:    _ServiceAccountInterface_ServiceAccountCreateToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/wangrenyi/kmpgo/proto/serviceaccount/serviceaccount.proto",
}

func init() {
	proto.RegisterFile("github.com/wangrenyi/kmpgo/proto/serviceaccount/serviceaccount.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 248 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0xd3, 0xcd, 0x4a, 0x03, 0x31,
	0x14, 0x05, 0x60, 0x57, 0x5d, 0x64, 0x21, 0x38, 0x0a, 0x62, 0x51, 0x17, 0x3e, 0xc0, 0x0c, 0xa8,
	0x2f, 0x20, 0x2d, 0x48, 0xc1, 0x85, 0xf4, 0x07, 0xc1, 0x8d, 0xa4, 0xf1, 0x38, 0x0d, 0x33, 0x73,
	0x6f, 0x4c, 0xee, 0x54, 0x7c, 0x2b, 0x1f, 0x51, 0xe8, 0xcc, 0x26, 0x5a, 0x71, 0x91, 0x76, 0x15,
	0x92, 0x7b, 0xf8, 0xce, 0x22, 0x89, 0x1a, 0x97, 0x56, 0x56, 0xed, 0x32, 0x37, 0xdc, 0x14, 0x1f,
	0x9a, 0x4a, 0x0f, 0xfa, 0xb4, 0x45, 0xd5, 0xb8, 0x92, 0x0b, 0xe7, 0x59, 0xb8, 0x08, 0xf0, 0x6b,
	0x6b, 0xa0, 0x8d, 0xe1, 0x96, 0xe4, 0xc7, 0x36, 0xdf, 0x64, 0xb2, 0xc3, 0xf8, 0x74, 0x78, 0xfb,
	0xaf, 0x6a, 0xb8, 0x69, 0x98, 0xfa, 0xa5, 0x53, 0xae, 0xbf, 0x06, 0xea, 0x74, 0xd6, 0x41, 0x77,
	0x1d, 0x34, 0x21, 0x81, 0x7f, 0xd3, 0x06, 0xd9, 0x42, 0x9d, 0xc4, 0xa3, 0x91, 0x87, 0x16, 0x64,
	0xe7, 0x79, 0x4f, 0x4c, 0x68, 0xcd, 0x15, 0xfa, 0xcc, 0x14, 0xef, 0x2d, 0x82, 0x0c, 0x2f, 0xfe,
	0x98, 0x06, 0xc7, 0x14, 0x70, 0x75, 0xf0, 0x9b, 0x5d, 0xb8, 0xd7, 0x7d, 0xb0, 0x63, 0xd4, 0x48,
	0x67, 0x5f, 0xd4, 0xe5, 0x36, 0x76, 0xc4, 0x75, 0x0d, 0x23, 0x96, 0x29, 0xb5, 0x60, 0xaa, 0x8e,
	0xe2, 0x82, 0x7b, 0x48, 0xaa, 0x39, 0x53, 0x59, 0x6c, 0x3e, 0xd8, 0x90, 0x8c, 0xce, 0xd5, 0x71,
	0x8c, 0x3e, 0x69, 0x31, 0xab, 0x9d, 0xab, 0x8f, 0xbb, 0x50, 0x9f, 0xd5, 0xd9, 0xb6, 0xa7, 0x3b,
	0xe7, 0x0a, 0xa9, 0x17, 0xb6, 0x1c, 0x6c, 0x7e, 0xce, 0xcd, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xf5, 0x11, 0xe8, 0x03, 0xc7, 0x03, 0x00, 0x00,
}
