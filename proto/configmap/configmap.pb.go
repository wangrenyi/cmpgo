// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/wangrenyi/kmpgo/proto/configmap/configmap.proto

/*
Package configmap is a generated protocol buffer package.

It is generated from these files:
	github.com/wangrenyi/kmpgo/proto/configmap/configmap.proto

It has these top-level messages:
*/
package configmap

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "github.com/wangrenyi/kmpgo/proto/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ConfigMapInterface service

type ConfigMapInterfaceClient interface {
	ConfigMapCreate(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error)
	ConfigMapUpdate(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error)
	ConfigMapDelete(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error)
	ConfigMapDeleteCollection(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error)
	ConfigMapGet(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error)
	ConfigMapList(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error)
	ConfigMapWatch(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error)
	ConfigMapPatch(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error)
}

type configMapInterfaceClient struct {
	cc *grpc.ClientConn
}

func NewConfigMapInterfaceClient(cc *grpc.ClientConn) ConfigMapInterfaceClient {
	return &configMapInterfaceClient{cc}
}

func (c *configMapInterfaceClient) ConfigMapCreate(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error) {
	out := new(common.InvokeServiceResponse)
	err := grpc.Invoke(ctx, "/configmap.ConfigMapInterface/ConfigMapCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configMapInterfaceClient) ConfigMapUpdate(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error) {
	out := new(common.InvokeServiceResponse)
	err := grpc.Invoke(ctx, "/configmap.ConfigMapInterface/ConfigMapUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configMapInterfaceClient) ConfigMapDelete(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error) {
	out := new(common.InvokeServiceResponse)
	err := grpc.Invoke(ctx, "/configmap.ConfigMapInterface/ConfigMapDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configMapInterfaceClient) ConfigMapDeleteCollection(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error) {
	out := new(common.InvokeServiceResponse)
	err := grpc.Invoke(ctx, "/configmap.ConfigMapInterface/ConfigMapDeleteCollection", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configMapInterfaceClient) ConfigMapGet(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error) {
	out := new(common.InvokeServiceResponse)
	err := grpc.Invoke(ctx, "/configmap.ConfigMapInterface/ConfigMapGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configMapInterfaceClient) ConfigMapList(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error) {
	out := new(common.InvokeServiceResponse)
	err := grpc.Invoke(ctx, "/configmap.ConfigMapInterface/ConfigMapList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configMapInterfaceClient) ConfigMapWatch(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error) {
	out := new(common.InvokeServiceResponse)
	err := grpc.Invoke(ctx, "/configmap.ConfigMapInterface/ConfigMapWatch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configMapInterfaceClient) ConfigMapPatch(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error) {
	out := new(common.InvokeServiceResponse)
	err := grpc.Invoke(ctx, "/configmap.ConfigMapInterface/ConfigMapPatch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ConfigMapInterface service

type ConfigMapInterfaceServer interface {
	ConfigMapCreate(context.Context, *common.InvokeServiceRequest) (*common.InvokeServiceResponse, error)
	ConfigMapUpdate(context.Context, *common.InvokeServiceRequest) (*common.InvokeServiceResponse, error)
	ConfigMapDelete(context.Context, *common.InvokeServiceRequest) (*common.InvokeServiceResponse, error)
	ConfigMapDeleteCollection(context.Context, *common.InvokeServiceRequest) (*common.InvokeServiceResponse, error)
	ConfigMapGet(context.Context, *common.InvokeServiceRequest) (*common.InvokeServiceResponse, error)
	ConfigMapList(context.Context, *common.InvokeServiceRequest) (*common.InvokeServiceResponse, error)
	ConfigMapWatch(context.Context, *common.InvokeServiceRequest) (*common.InvokeServiceResponse, error)
	ConfigMapPatch(context.Context, *common.InvokeServiceRequest) (*common.InvokeServiceResponse, error)
}

func RegisterConfigMapInterfaceServer(s *grpc.Server, srv ConfigMapInterfaceServer) {
	s.RegisterService(&_ConfigMapInterface_serviceDesc, srv)
}

func _ConfigMapInterface_ConfigMapCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.InvokeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigMapInterfaceServer).ConfigMapCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configmap.ConfigMapInterface/ConfigMapCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigMapInterfaceServer).ConfigMapCreate(ctx, req.(*common.InvokeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigMapInterface_ConfigMapUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.InvokeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigMapInterfaceServer).ConfigMapUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configmap.ConfigMapInterface/ConfigMapUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigMapInterfaceServer).ConfigMapUpdate(ctx, req.(*common.InvokeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigMapInterface_ConfigMapDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.InvokeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigMapInterfaceServer).ConfigMapDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configmap.ConfigMapInterface/ConfigMapDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigMapInterfaceServer).ConfigMapDelete(ctx, req.(*common.InvokeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigMapInterface_ConfigMapDeleteCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.InvokeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigMapInterfaceServer).ConfigMapDeleteCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configmap.ConfigMapInterface/ConfigMapDeleteCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigMapInterfaceServer).ConfigMapDeleteCollection(ctx, req.(*common.InvokeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigMapInterface_ConfigMapGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.InvokeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigMapInterfaceServer).ConfigMapGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configmap.ConfigMapInterface/ConfigMapGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigMapInterfaceServer).ConfigMapGet(ctx, req.(*common.InvokeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigMapInterface_ConfigMapList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.InvokeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigMapInterfaceServer).ConfigMapList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configmap.ConfigMapInterface/ConfigMapList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigMapInterfaceServer).ConfigMapList(ctx, req.(*common.InvokeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigMapInterface_ConfigMapWatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.InvokeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigMapInterfaceServer).ConfigMapWatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configmap.ConfigMapInterface/ConfigMapWatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigMapInterfaceServer).ConfigMapWatch(ctx, req.(*common.InvokeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigMapInterface_ConfigMapPatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.InvokeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigMapInterfaceServer).ConfigMapPatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configmap.ConfigMapInterface/ConfigMapPatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigMapInterfaceServer).ConfigMapPatch(ctx, req.(*common.InvokeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ConfigMapInterface_serviceDesc = grpc.ServiceDesc{
	ServiceName: "configmap.ConfigMapInterface",
	HandlerType: (*ConfigMapInterfaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConfigMapCreate",
			Handler:    _ConfigMapInterface_ConfigMapCreate_Handler,
		},
		{
			MethodName: "ConfigMapUpdate",
			Handler:    _ConfigMapInterface_ConfigMapUpdate_Handler,
		},
		{
			MethodName: "ConfigMapDelete",
			Handler:    _ConfigMapInterface_ConfigMapDelete_Handler,
		},
		{
			MethodName: "ConfigMapDeleteCollection",
			Handler:    _ConfigMapInterface_ConfigMapDeleteCollection_Handler,
		},
		{
			MethodName: "ConfigMapGet",
			Handler:    _ConfigMapInterface_ConfigMapGet_Handler,
		},
		{
			MethodName: "ConfigMapList",
			Handler:    _ConfigMapInterface_ConfigMapList_Handler,
		},
		{
			MethodName: "ConfigMapWatch",
			Handler:    _ConfigMapInterface_ConfigMapWatch_Handler,
		},
		{
			MethodName: "ConfigMapPatch",
			Handler:    _ConfigMapInterface_ConfigMapPatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/wangrenyi/kmpgo/proto/configmap/configmap.proto",
}

func init() {
	proto.RegisterFile("github.com/wangrenyi/kmpgo/proto/configmap/configmap.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 230 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0xd2, 0xcf, 0x4a, 0xc4, 0x30,
	0x10, 0x06, 0x70, 0x2f, 0x0a, 0x06, 0xff, 0x40, 0x6e, 0x2e, 0x7a, 0xf1, 0x01, 0x1a, 0x50, 0x4f,
	0x5e, 0x2b, 0xc8, 0x82, 0xab, 0x8b, 0x22, 0x82, 0xb7, 0x6c, 0x9c, 0xcd, 0x86, 0x36, 0x33, 0x31,
	0x99, 0x56, 0x7c, 0x22, 0x5f, 0x53, 0xa8, 0x25, 0xa2, 0x20, 0x08, 0xe9, 0x69, 0x86, 0xef, 0x63,
	0x7e, 0xa7, 0x11, 0x97, 0xd6, 0xf1, 0xa6, 0x5b, 0x55, 0x86, 0xbc, 0x7a, 0xd3, 0x68, 0x23, 0xe0,
	0xbb, 0x53, 0x8d, 0x0f, 0x96, 0x54, 0x88, 0xc4, 0xa4, 0x0c, 0xe1, 0xda, 0x59, 0xaf, 0xc3, 0xf7,
	0x56, 0x0d, 0x8d, 0xdc, 0xcd, 0xc1, 0xec, 0xe2, 0x1f, 0x8c, 0xf7, 0x84, 0xe3, 0xf8, 0x02, 0xce,
	0x3e, 0xb6, 0x85, 0xac, 0x07, 0x63, 0xa1, 0xc3, 0x1c, 0x19, 0xe2, 0x5a, 0x1b, 0x90, 0x4b, 0x71,
	0x98, 0xd3, 0x3a, 0x82, 0x66, 0x90, 0xc7, 0xd5, 0x78, 0x38, 0xc7, 0x9e, 0x1a, 0x78, 0x80, 0xd8,
	0x3b, 0x03, 0xf7, 0xf0, 0xda, 0x41, 0xe2, 0xd9, 0xc9, 0x1f, 0x6d, 0x0a, 0x84, 0x09, 0x4e, 0xb7,
	0x7e, 0x88, 0x8f, 0xe1, 0x65, 0x62, 0xf1, 0x0a, 0x5a, 0x28, 0x17, 0x9f, 0xc5, 0xd1, 0x2f, 0xb1,
	0xa6, 0xb6, 0x05, 0xc3, 0x8e, 0xb0, 0xd4, 0x5e, 0x88, 0xbd, 0x6c, 0x5f, 0x03, 0x97, 0x72, 0xb7,
	0x62, 0x3f, 0x73, 0x37, 0x2e, 0x15, 0x7b, 0x77, 0xe2, 0x20, 0x7b, 0x4f, 0x9a, 0xcd, 0x66, 0x4a,
	0x70, 0x39, 0x01, 0xb8, 0xda, 0x19, 0x1e, 0xf6, 0xfc, 0x33, 0x00, 0x00, 0xff, 0xff, 0x0a, 0xb0,
	0x92, 0xf9, 0x2f, 0x03, 0x00, 0x00,
}
