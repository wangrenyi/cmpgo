// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/wangrenyi/kmpgo/proto/componentstatus/componentstatus.proto

/*
Package componentstatus is a generated protocol buffer package.

It is generated from these files:
	github.com/wangrenyi/kmpgo/proto/componentstatus/componentstatus.proto

It has these top-level messages:
*/
package componentstatus

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "github.com/wangrenyi/kmpgo/proto/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ComponentStatusInterface service

type ComponentStatusInterfaceClient interface {
	ComponentStatusCreate(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error)
	ComponentStatusUpdate(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error)
	ComponentStatusDelete(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error)
	ComponentStatusDeleteCollection(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error)
	ComponentStatusGet(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error)
	ComponentStatusList(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error)
	ComponentStatusWatch(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error)
	ComponentStatusPatch(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error)
}

type componentStatusInterfaceClient struct {
	cc *grpc.ClientConn
}

func NewComponentStatusInterfaceClient(cc *grpc.ClientConn) ComponentStatusInterfaceClient {
	return &componentStatusInterfaceClient{cc}
}

func (c *componentStatusInterfaceClient) ComponentStatusCreate(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error) {
	out := new(common.InvokeServiceResponse)
	err := grpc.Invoke(ctx, "/componentstatus.ComponentStatusInterface/ComponentStatusCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *componentStatusInterfaceClient) ComponentStatusUpdate(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error) {
	out := new(common.InvokeServiceResponse)
	err := grpc.Invoke(ctx, "/componentstatus.ComponentStatusInterface/ComponentStatusUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *componentStatusInterfaceClient) ComponentStatusDelete(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error) {
	out := new(common.InvokeServiceResponse)
	err := grpc.Invoke(ctx, "/componentstatus.ComponentStatusInterface/ComponentStatusDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *componentStatusInterfaceClient) ComponentStatusDeleteCollection(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error) {
	out := new(common.InvokeServiceResponse)
	err := grpc.Invoke(ctx, "/componentstatus.ComponentStatusInterface/ComponentStatusDeleteCollection", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *componentStatusInterfaceClient) ComponentStatusGet(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error) {
	out := new(common.InvokeServiceResponse)
	err := grpc.Invoke(ctx, "/componentstatus.ComponentStatusInterface/ComponentStatusGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *componentStatusInterfaceClient) ComponentStatusList(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error) {
	out := new(common.InvokeServiceResponse)
	err := grpc.Invoke(ctx, "/componentstatus.ComponentStatusInterface/ComponentStatusList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *componentStatusInterfaceClient) ComponentStatusWatch(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error) {
	out := new(common.InvokeServiceResponse)
	err := grpc.Invoke(ctx, "/componentstatus.ComponentStatusInterface/ComponentStatusWatch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *componentStatusInterfaceClient) ComponentStatusPatch(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error) {
	out := new(common.InvokeServiceResponse)
	err := grpc.Invoke(ctx, "/componentstatus.ComponentStatusInterface/ComponentStatusPatch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ComponentStatusInterface service

type ComponentStatusInterfaceServer interface {
	ComponentStatusCreate(context.Context, *common.InvokeServiceRequest) (*common.InvokeServiceResponse, error)
	ComponentStatusUpdate(context.Context, *common.InvokeServiceRequest) (*common.InvokeServiceResponse, error)
	ComponentStatusDelete(context.Context, *common.InvokeServiceRequest) (*common.InvokeServiceResponse, error)
	ComponentStatusDeleteCollection(context.Context, *common.InvokeServiceRequest) (*common.InvokeServiceResponse, error)
	ComponentStatusGet(context.Context, *common.InvokeServiceRequest) (*common.InvokeServiceResponse, error)
	ComponentStatusList(context.Context, *common.InvokeServiceRequest) (*common.InvokeServiceResponse, error)
	ComponentStatusWatch(context.Context, *common.InvokeServiceRequest) (*common.InvokeServiceResponse, error)
	ComponentStatusPatch(context.Context, *common.InvokeServiceRequest) (*common.InvokeServiceResponse, error)
}

func RegisterComponentStatusInterfaceServer(s *grpc.Server, srv ComponentStatusInterfaceServer) {
	s.RegisterService(&_ComponentStatusInterface_serviceDesc, srv)
}

func _ComponentStatusInterface_ComponentStatusCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.InvokeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComponentStatusInterfaceServer).ComponentStatusCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/componentstatus.ComponentStatusInterface/ComponentStatusCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComponentStatusInterfaceServer).ComponentStatusCreate(ctx, req.(*common.InvokeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComponentStatusInterface_ComponentStatusUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.InvokeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComponentStatusInterfaceServer).ComponentStatusUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/componentstatus.ComponentStatusInterface/ComponentStatusUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComponentStatusInterfaceServer).ComponentStatusUpdate(ctx, req.(*common.InvokeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComponentStatusInterface_ComponentStatusDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.InvokeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComponentStatusInterfaceServer).ComponentStatusDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/componentstatus.ComponentStatusInterface/ComponentStatusDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComponentStatusInterfaceServer).ComponentStatusDelete(ctx, req.(*common.InvokeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComponentStatusInterface_ComponentStatusDeleteCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.InvokeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComponentStatusInterfaceServer).ComponentStatusDeleteCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/componentstatus.ComponentStatusInterface/ComponentStatusDeleteCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComponentStatusInterfaceServer).ComponentStatusDeleteCollection(ctx, req.(*common.InvokeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComponentStatusInterface_ComponentStatusGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.InvokeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComponentStatusInterfaceServer).ComponentStatusGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/componentstatus.ComponentStatusInterface/ComponentStatusGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComponentStatusInterfaceServer).ComponentStatusGet(ctx, req.(*common.InvokeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComponentStatusInterface_ComponentStatusList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.InvokeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComponentStatusInterfaceServer).ComponentStatusList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/componentstatus.ComponentStatusInterface/ComponentStatusList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComponentStatusInterfaceServer).ComponentStatusList(ctx, req.(*common.InvokeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComponentStatusInterface_ComponentStatusWatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.InvokeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComponentStatusInterfaceServer).ComponentStatusWatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/componentstatus.ComponentStatusInterface/ComponentStatusWatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComponentStatusInterfaceServer).ComponentStatusWatch(ctx, req.(*common.InvokeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComponentStatusInterface_ComponentStatusPatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.InvokeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComponentStatusInterfaceServer).ComponentStatusPatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/componentstatus.ComponentStatusInterface/ComponentStatusPatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComponentStatusInterfaceServer).ComponentStatusPatch(ctx, req.(*common.InvokeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ComponentStatusInterface_serviceDesc = grpc.ServiceDesc{
	ServiceName: "componentstatus.ComponentStatusInterface",
	HandlerType: (*ComponentStatusInterfaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ComponentStatusCreate",
			Handler:    _ComponentStatusInterface_ComponentStatusCreate_Handler,
		},
		{
			MethodName: "ComponentStatusUpdate",
			Handler:    _ComponentStatusInterface_ComponentStatusUpdate_Handler,
		},
		{
			MethodName: "ComponentStatusDelete",
			Handler:    _ComponentStatusInterface_ComponentStatusDelete_Handler,
		},
		{
			MethodName: "ComponentStatusDeleteCollection",
			Handler:    _ComponentStatusInterface_ComponentStatusDeleteCollection_Handler,
		},
		{
			MethodName: "ComponentStatusGet",
			Handler:    _ComponentStatusInterface_ComponentStatusGet_Handler,
		},
		{
			MethodName: "ComponentStatusList",
			Handler:    _ComponentStatusInterface_ComponentStatusList_Handler,
		},
		{
			MethodName: "ComponentStatusWatch",
			Handler:    _ComponentStatusInterface_ComponentStatusWatch_Handler,
		},
		{
			MethodName: "ComponentStatusPatch",
			Handler:    _ComponentStatusInterface_ComponentStatusPatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/wangrenyi/kmpgo/proto/componentstatus/componentstatus.proto",
}

func init() {
	proto.RegisterFile("github.com/wangrenyi/kmpgo/proto/componentstatus/componentstatus.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 235 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0xd2, 0xc1, 0x4a, 0x03, 0x31,
	0x10, 0x06, 0x60, 0x2f, 0x7a, 0xc8, 0x45, 0x58, 0x15, 0xa4, 0x28, 0x82, 0x0f, 0xb0, 0x0b, 0xea,
	0x1b, 0xac, 0x28, 0x05, 0x0f, 0xe2, 0x5a, 0xbd, 0x9a, 0xc6, 0xdf, 0x6d, 0xe8, 0x66, 0x26, 0x26,
	0xb3, 0x15, 0x1f, 0xd6, 0x77, 0x11, 0xd6, 0x7a, 0x09, 0x15, 0x84, 0x6c, 0x4f, 0x21, 0xf3, 0x0f,
	0xdf, 0x7f, 0x19, 0x75, 0xd3, 0x5a, 0x59, 0xf4, 0xf3, 0xd2, 0xb0, 0xab, 0x3e, 0x34, 0xb5, 0x01,
	0xf4, 0x69, 0xab, 0xa5, 0xf3, 0x2d, 0x57, 0x3e, 0xb0, 0x70, 0x65, 0xd8, 0x79, 0x26, 0x90, 0x44,
	0xd1, 0xd2, 0xc7, 0xf4, 0x5f, 0x0e, 0x5b, 0xc5, 0x7e, 0x32, 0x9e, 0x5c, 0xfd, 0x07, 0x76, 0x4c,
	0xeb, 0xe7, 0x87, 0xb9, 0xf8, 0xda, 0x55, 0xc7, 0xf5, 0xaf, 0xd4, 0x0c, 0xd2, 0x94, 0x04, 0xe1,
	0x4d, 0x1b, 0x14, 0x4f, 0xea, 0x28, 0xc9, 0xea, 0x00, 0x2d, 0x28, 0x4e, 0xca, 0x35, 0x32, 0xa5,
	0x15, 0x2f, 0xd1, 0x20, 0xac, 0xac, 0xc1, 0x03, 0xde, 0x7b, 0x44, 0x99, 0x9c, 0xfe, 0x91, 0x46,
	0xcf, 0x14, 0x71, 0xbe, 0xb3, 0xc1, 0x9d, 0xf9, 0xd7, 0xad, 0xb8, 0xd7, 0xe8, 0x90, 0xef, 0xbe,
	0xa8, 0xb3, 0x8d, 0x6e, 0xcd, 0x5d, 0x07, 0x23, 0x96, 0x29, 0xb7, 0xa1, 0x51, 0x45, 0xd2, 0x70,
	0x0b, 0xc9, 0x45, 0x1f, 0xd5, 0x41, 0x82, 0xde, 0xd9, 0x98, 0xad, 0xce, 0xd4, 0x61, 0xa2, 0x3e,
	0x6b, 0x31, 0x8b, 0xf1, 0xd9, 0xfb, 0x11, 0xd8, 0xf9, 0xde, 0x70, 0xe6, 0x97, 0xdf, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x5c, 0x63, 0x06, 0x83, 0x77, 0x03, 0x00, 0x00,
}
