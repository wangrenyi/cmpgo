// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/wangrenyi/kmpgo/proto/service/service.proto

/*
Package service is a generated protocol buffer package.

It is generated from these files:
	github.com/wangrenyi/kmpgo/proto/service/service.proto

It has these top-level messages:
*/
package service

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "github.com/wangrenyi/kmpgo/proto/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ServiceInterface service

type ServiceInterfaceClient interface {
	ServiceCreate(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error)
	ServiceUpdate(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error)
	ServiceUpdateStatus(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error)
	ServiceDelete(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error)
	ServiceGet(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error)
	ServiceList(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error)
	ServiceWatch(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error)
	ServicePatch(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error)
	// Service expansion
	ServiceProxyGet(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error)
}

type serviceInterfaceClient struct {
	cc *grpc.ClientConn
}

func NewServiceInterfaceClient(cc *grpc.ClientConn) ServiceInterfaceClient {
	return &serviceInterfaceClient{cc}
}

func (c *serviceInterfaceClient) ServiceCreate(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error) {
	out := new(common.InvokeServiceResponse)
	err := grpc.Invoke(ctx, "/service.ServiceInterface/ServiceCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceInterfaceClient) ServiceUpdate(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error) {
	out := new(common.InvokeServiceResponse)
	err := grpc.Invoke(ctx, "/service.ServiceInterface/ServiceUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceInterfaceClient) ServiceUpdateStatus(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error) {
	out := new(common.InvokeServiceResponse)
	err := grpc.Invoke(ctx, "/service.ServiceInterface/ServiceUpdateStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceInterfaceClient) ServiceDelete(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error) {
	out := new(common.InvokeServiceResponse)
	err := grpc.Invoke(ctx, "/service.ServiceInterface/ServiceDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceInterfaceClient) ServiceGet(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error) {
	out := new(common.InvokeServiceResponse)
	err := grpc.Invoke(ctx, "/service.ServiceInterface/ServiceGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceInterfaceClient) ServiceList(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error) {
	out := new(common.InvokeServiceResponse)
	err := grpc.Invoke(ctx, "/service.ServiceInterface/ServiceList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceInterfaceClient) ServiceWatch(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error) {
	out := new(common.InvokeServiceResponse)
	err := grpc.Invoke(ctx, "/service.ServiceInterface/ServiceWatch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceInterfaceClient) ServicePatch(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error) {
	out := new(common.InvokeServiceResponse)
	err := grpc.Invoke(ctx, "/service.ServiceInterface/ServicePatch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceInterfaceClient) ServiceProxyGet(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error) {
	out := new(common.InvokeServiceResponse)
	err := grpc.Invoke(ctx, "/service.ServiceInterface/ServiceProxyGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ServiceInterface service

type ServiceInterfaceServer interface {
	ServiceCreate(context.Context, *common.InvokeServiceRequest) (*common.InvokeServiceResponse, error)
	ServiceUpdate(context.Context, *common.InvokeServiceRequest) (*common.InvokeServiceResponse, error)
	ServiceUpdateStatus(context.Context, *common.InvokeServiceRequest) (*common.InvokeServiceResponse, error)
	ServiceDelete(context.Context, *common.InvokeServiceRequest) (*common.InvokeServiceResponse, error)
	ServiceGet(context.Context, *common.InvokeServiceRequest) (*common.InvokeServiceResponse, error)
	ServiceList(context.Context, *common.InvokeServiceRequest) (*common.InvokeServiceResponse, error)
	ServiceWatch(context.Context, *common.InvokeServiceRequest) (*common.InvokeServiceResponse, error)
	ServicePatch(context.Context, *common.InvokeServiceRequest) (*common.InvokeServiceResponse, error)
	// Service expansion
	ServiceProxyGet(context.Context, *common.InvokeServiceRequest) (*common.InvokeServiceResponse, error)
}

func RegisterServiceInterfaceServer(s *grpc.Server, srv ServiceInterfaceServer) {
	s.RegisterService(&_ServiceInterface_serviceDesc, srv)
}

func _ServiceInterface_ServiceCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.InvokeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceInterfaceServer).ServiceCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.ServiceInterface/ServiceCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceInterfaceServer).ServiceCreate(ctx, req.(*common.InvokeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceInterface_ServiceUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.InvokeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceInterfaceServer).ServiceUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.ServiceInterface/ServiceUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceInterfaceServer).ServiceUpdate(ctx, req.(*common.InvokeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceInterface_ServiceUpdateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.InvokeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceInterfaceServer).ServiceUpdateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.ServiceInterface/ServiceUpdateStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceInterfaceServer).ServiceUpdateStatus(ctx, req.(*common.InvokeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceInterface_ServiceDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.InvokeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceInterfaceServer).ServiceDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.ServiceInterface/ServiceDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceInterfaceServer).ServiceDelete(ctx, req.(*common.InvokeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceInterface_ServiceGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.InvokeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceInterfaceServer).ServiceGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.ServiceInterface/ServiceGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceInterfaceServer).ServiceGet(ctx, req.(*common.InvokeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceInterface_ServiceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.InvokeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceInterfaceServer).ServiceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.ServiceInterface/ServiceList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceInterfaceServer).ServiceList(ctx, req.(*common.InvokeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceInterface_ServiceWatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.InvokeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceInterfaceServer).ServiceWatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.ServiceInterface/ServiceWatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceInterfaceServer).ServiceWatch(ctx, req.(*common.InvokeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceInterface_ServicePatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.InvokeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceInterfaceServer).ServicePatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.ServiceInterface/ServicePatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceInterfaceServer).ServicePatch(ctx, req.(*common.InvokeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceInterface_ServiceProxyGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.InvokeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceInterfaceServer).ServiceProxyGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.ServiceInterface/ServiceProxyGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceInterfaceServer).ServiceProxyGet(ctx, req.(*common.InvokeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ServiceInterface_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.ServiceInterface",
	HandlerType: (*ServiceInterfaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ServiceCreate",
			Handler:    _ServiceInterface_ServiceCreate_Handler,
		},
		{
			MethodName: "ServiceUpdate",
			Handler:    _ServiceInterface_ServiceUpdate_Handler,
		},
		{
			MethodName: "ServiceUpdateStatus",
			Handler:    _ServiceInterface_ServiceUpdateStatus_Handler,
		},
		{
			MethodName: "ServiceDelete",
			Handler:    _ServiceInterface_ServiceDelete_Handler,
		},
		{
			MethodName: "ServiceGet",
			Handler:    _ServiceInterface_ServiceGet_Handler,
		},
		{
			MethodName: "ServiceList",
			Handler:    _ServiceInterface_ServiceList_Handler,
		},
		{
			MethodName: "ServiceWatch",
			Handler:    _ServiceInterface_ServiceWatch_Handler,
		},
		{
			MethodName: "ServicePatch",
			Handler:    _ServiceInterface_ServicePatch_Handler,
		},
		{
			MethodName: "ServiceProxyGet",
			Handler:    _ServiceInterface_ServiceProxyGet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/wangrenyi/kmpgo/proto/service/service.proto",
}

func init() {
	proto.RegisterFile("github.com/wangrenyi/kmpgo/proto/service/service.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 232 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x32, 0x4b, 0xcf, 0x2c, 0xc9,
	0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x2f, 0x4f, 0xcc, 0x4b, 0x2f, 0x4a, 0xcd, 0xab, 0xcc,
	0xd4, 0xcf, 0xce, 0x2d, 0x48, 0xcf, 0xd7, 0x2f, 0x28, 0xca, 0x2f, 0xc9, 0xd7, 0x2f, 0x4e, 0x2d,
	0x2a, 0xcb, 0x4c, 0x4e, 0x85, 0xd1, 0x7a, 0x60, 0x51, 0x21, 0x76, 0x28, 0x57, 0xca, 0x84, 0xa0,
	0x01, 0xc9, 0xf9, 0xb9, 0xb9, 0xf9, 0x79, 0x50, 0x0a, 0xa2, 0xdd, 0xe8, 0x31, 0x2b, 0x97, 0x40,
	0x30, 0xc4, 0x04, 0xcf, 0xbc, 0x92, 0xd4, 0xa2, 0xb4, 0xc4, 0xe4, 0x54, 0x21, 0x3f, 0x2e, 0x5e,
	0xa8, 0x98, 0x73, 0x51, 0x6a, 0x62, 0x49, 0xaa, 0x90, 0x8c, 0x1e, 0x54, 0x93, 0x67, 0x5e, 0x59,
	0x7e, 0x76, 0x2a, 0x54, 0x32, 0x28, 0xb5, 0xb0, 0x34, 0xb5, 0xb8, 0x44, 0x4a, 0x16, 0x87, 0x6c,
	0x71, 0x41, 0x7e, 0x5e, 0x71, 0xaa, 0x12, 0x03, 0x92, 0x79, 0xa1, 0x05, 0x29, 0x54, 0x30, 0x2f,
	0x84, 0x4b, 0x18, 0xc5, 0xbc, 0xe0, 0x92, 0xc4, 0x92, 0xd2, 0x62, 0xea, 0xb9, 0xd2, 0x25, 0x35,
	0x27, 0x95, 0x72, 0x57, 0x7a, 0x73, 0x71, 0x41, 0x05, 0xdd, 0x53, 0x4b, 0x28, 0x35, 0xcc, 0x87,
	0x8b, 0x1b, 0x2a, 0xe8, 0x93, 0x59, 0x4c, 0xb1, 0x69, 0xbe, 0x5c, 0x3c, 0x50, 0xc1, 0xf0, 0xc4,
	0x92, 0xe4, 0x0c, 0xea, 0x19, 0x17, 0x40, 0x0d, 0xe3, 0x02, 0xb8, 0xf8, 0x61, 0xc6, 0x15, 0xe5,
	0x57, 0x54, 0x52, 0x1e, 0x7a, 0x49, 0x6c, 0xe0, 0xc4, 0x6e, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff,
	0xb8, 0x08, 0x18, 0x04, 0x65, 0x03, 0x00, 0x00,
}
