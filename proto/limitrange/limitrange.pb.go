// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/wangrenyi/kmpgo/proto/limitrange/limitrange.proto

/*
Package limitrange is a generated protocol buffer package.

It is generated from these files:
	github.com/wangrenyi/kmpgo/proto/limitrange/limitrange.proto

It has these top-level messages:
*/
package limitrange

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "github.com/wangrenyi/kmpgo/proto/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for LimitRangeInterface service

type LimitRangeInterfaceClient interface {
	LimitRangeCreate(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error)
	LimitRangeUpdate(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error)
	LimitRangeDelete(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error)
	LimitRangeDeleteCollection(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error)
	LimitRangeGet(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error)
	LimitRangeList(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error)
	LimitRangeWatch(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error)
	LimitRangePatch(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error)
}

type limitRangeInterfaceClient struct {
	cc *grpc.ClientConn
}

func NewLimitRangeInterfaceClient(cc *grpc.ClientConn) LimitRangeInterfaceClient {
	return &limitRangeInterfaceClient{cc}
}

func (c *limitRangeInterfaceClient) LimitRangeCreate(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error) {
	out := new(common.InvokeServiceResponse)
	err := grpc.Invoke(ctx, "/limitrange.LimitRangeInterface/LimitRangeCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *limitRangeInterfaceClient) LimitRangeUpdate(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error) {
	out := new(common.InvokeServiceResponse)
	err := grpc.Invoke(ctx, "/limitrange.LimitRangeInterface/LimitRangeUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *limitRangeInterfaceClient) LimitRangeDelete(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error) {
	out := new(common.InvokeServiceResponse)
	err := grpc.Invoke(ctx, "/limitrange.LimitRangeInterface/LimitRangeDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *limitRangeInterfaceClient) LimitRangeDeleteCollection(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error) {
	out := new(common.InvokeServiceResponse)
	err := grpc.Invoke(ctx, "/limitrange.LimitRangeInterface/LimitRangeDeleteCollection", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *limitRangeInterfaceClient) LimitRangeGet(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error) {
	out := new(common.InvokeServiceResponse)
	err := grpc.Invoke(ctx, "/limitrange.LimitRangeInterface/LimitRangeGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *limitRangeInterfaceClient) LimitRangeList(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error) {
	out := new(common.InvokeServiceResponse)
	err := grpc.Invoke(ctx, "/limitrange.LimitRangeInterface/LimitRangeList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *limitRangeInterfaceClient) LimitRangeWatch(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error) {
	out := new(common.InvokeServiceResponse)
	err := grpc.Invoke(ctx, "/limitrange.LimitRangeInterface/LimitRangeWatch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *limitRangeInterfaceClient) LimitRangePatch(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error) {
	out := new(common.InvokeServiceResponse)
	err := grpc.Invoke(ctx, "/limitrange.LimitRangeInterface/LimitRangePatch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LimitRangeInterface service

type LimitRangeInterfaceServer interface {
	LimitRangeCreate(context.Context, *common.InvokeServiceRequest) (*common.InvokeServiceResponse, error)
	LimitRangeUpdate(context.Context, *common.InvokeServiceRequest) (*common.InvokeServiceResponse, error)
	LimitRangeDelete(context.Context, *common.InvokeServiceRequest) (*common.InvokeServiceResponse, error)
	LimitRangeDeleteCollection(context.Context, *common.InvokeServiceRequest) (*common.InvokeServiceResponse, error)
	LimitRangeGet(context.Context, *common.InvokeServiceRequest) (*common.InvokeServiceResponse, error)
	LimitRangeList(context.Context, *common.InvokeServiceRequest) (*common.InvokeServiceResponse, error)
	LimitRangeWatch(context.Context, *common.InvokeServiceRequest) (*common.InvokeServiceResponse, error)
	LimitRangePatch(context.Context, *common.InvokeServiceRequest) (*common.InvokeServiceResponse, error)
}

func RegisterLimitRangeInterfaceServer(s *grpc.Server, srv LimitRangeInterfaceServer) {
	s.RegisterService(&_LimitRangeInterface_serviceDesc, srv)
}

func _LimitRangeInterface_LimitRangeCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.InvokeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LimitRangeInterfaceServer).LimitRangeCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/limitrange.LimitRangeInterface/LimitRangeCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LimitRangeInterfaceServer).LimitRangeCreate(ctx, req.(*common.InvokeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LimitRangeInterface_LimitRangeUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.InvokeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LimitRangeInterfaceServer).LimitRangeUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/limitrange.LimitRangeInterface/LimitRangeUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LimitRangeInterfaceServer).LimitRangeUpdate(ctx, req.(*common.InvokeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LimitRangeInterface_LimitRangeDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.InvokeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LimitRangeInterfaceServer).LimitRangeDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/limitrange.LimitRangeInterface/LimitRangeDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LimitRangeInterfaceServer).LimitRangeDelete(ctx, req.(*common.InvokeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LimitRangeInterface_LimitRangeDeleteCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.InvokeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LimitRangeInterfaceServer).LimitRangeDeleteCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/limitrange.LimitRangeInterface/LimitRangeDeleteCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LimitRangeInterfaceServer).LimitRangeDeleteCollection(ctx, req.(*common.InvokeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LimitRangeInterface_LimitRangeGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.InvokeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LimitRangeInterfaceServer).LimitRangeGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/limitrange.LimitRangeInterface/LimitRangeGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LimitRangeInterfaceServer).LimitRangeGet(ctx, req.(*common.InvokeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LimitRangeInterface_LimitRangeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.InvokeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LimitRangeInterfaceServer).LimitRangeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/limitrange.LimitRangeInterface/LimitRangeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LimitRangeInterfaceServer).LimitRangeList(ctx, req.(*common.InvokeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LimitRangeInterface_LimitRangeWatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.InvokeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LimitRangeInterfaceServer).LimitRangeWatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/limitrange.LimitRangeInterface/LimitRangeWatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LimitRangeInterfaceServer).LimitRangeWatch(ctx, req.(*common.InvokeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LimitRangeInterface_LimitRangePatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.InvokeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LimitRangeInterfaceServer).LimitRangePatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/limitrange.LimitRangeInterface/LimitRangePatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LimitRangeInterfaceServer).LimitRangePatch(ctx, req.(*common.InvokeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LimitRangeInterface_serviceDesc = grpc.ServiceDesc{
	ServiceName: "limitrange.LimitRangeInterface",
	HandlerType: (*LimitRangeInterfaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LimitRangeCreate",
			Handler:    _LimitRangeInterface_LimitRangeCreate_Handler,
		},
		{
			MethodName: "LimitRangeUpdate",
			Handler:    _LimitRangeInterface_LimitRangeUpdate_Handler,
		},
		{
			MethodName: "LimitRangeDelete",
			Handler:    _LimitRangeInterface_LimitRangeDelete_Handler,
		},
		{
			MethodName: "LimitRangeDeleteCollection",
			Handler:    _LimitRangeInterface_LimitRangeDeleteCollection_Handler,
		},
		{
			MethodName: "LimitRangeGet",
			Handler:    _LimitRangeInterface_LimitRangeGet_Handler,
		},
		{
			MethodName: "LimitRangeList",
			Handler:    _LimitRangeInterface_LimitRangeList_Handler,
		},
		{
			MethodName: "LimitRangeWatch",
			Handler:    _LimitRangeInterface_LimitRangeWatch_Handler,
		},
		{
			MethodName: "LimitRangePatch",
			Handler:    _LimitRangeInterface_LimitRangePatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/wangrenyi/kmpgo/proto/limitrange/limitrange.proto",
}

func init() {
	proto.RegisterFile("github.com/wangrenyi/kmpgo/proto/limitrange/limitrange.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 233 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0xd2, 0xbf, 0x4a, 0x03, 0x41,
	0x10, 0x06, 0x70, 0x1b, 0x2d, 0x06, 0xfc, 0xc3, 0xd9, 0x1d, 0xda, 0xf8, 0x00, 0x77, 0xa0, 0x96,
	0x76, 0x11, 0x24, 0x10, 0x34, 0x46, 0xc4, 0xc2, 0x6a, 0xb3, 0x7e, 0x5e, 0x96, 0xdc, 0xce, 0x9c,
	0xbb, 0x93, 0x88, 0x6f, 0xe5, 0x23, 0x4a, 0x62, 0x60, 0x55, 0x90, 0x14, 0x7b, 0xd5, 0x0c, 0xdf,
	0xc7, 0xfc, 0xaa, 0xa1, 0xab, 0xc6, 0xe9, 0x6c, 0x31, 0xad, 0xac, 0xf8, 0xfa, 0xdd, 0x70, 0x13,
	0xc0, 0x1f, 0xae, 0x9e, 0xfb, 0xae, 0x91, 0xba, 0x0b, 0xa2, 0x52, 0xb7, 0xce, 0x3b, 0x0d, 0x86,
	0x1b, 0xfc, 0x58, 0xab, 0x75, 0x57, 0x50, 0x4a, 0xca, 0xcb, 0xad, 0x92, 0x15, 0xef, 0x85, 0x37,
	0xe3, 0x5b, 0x38, 0xff, 0xdc, 0xa5, 0xe3, 0xd1, 0x0a, 0x99, 0xac, 0x90, 0x21, 0x2b, 0xc2, 0xab,
	0xb1, 0x28, 0xee, 0xe9, 0x28, 0xc5, 0x83, 0x00, 0xa3, 0x28, 0x4e, 0xaa, 0xcd, 0xe9, 0x90, 0x97,
	0x32, 0xc7, 0x03, 0xc2, 0xd2, 0x59, 0x4c, 0xf0, 0xb6, 0x40, 0xd4, 0xf2, 0xf4, 0x9f, 0x36, 0x76,
	0xc2, 0x11, 0x67, 0x3b, 0xbf, 0xc9, 0xc7, 0xee, 0xa5, 0x6f, 0xf2, 0x1a, 0x2d, 0xf2, 0xc9, 0x67,
	0x2a, 0xff, 0x92, 0x03, 0x69, 0x5b, 0x58, 0x75, 0xc2, 0xb9, 0xf8, 0x2d, 0xed, 0x27, 0xfc, 0x06,
	0x9a, 0xeb, 0xdd, 0xd1, 0x41, 0xf2, 0x46, 0x2e, 0x66, 0x83, 0x63, 0x3a, 0x4c, 0xe0, 0x93, 0x51,
	0x3b, 0xeb, 0x55, 0x1c, 0xf7, 0x20, 0x4e, 0xf7, 0xd6, 0x9f, 0x7b, 0xf1, 0x15, 0x00, 0x00, 0xff,
	0xff, 0xc9, 0x71, 0xc8, 0xc7, 0x3b, 0x03, 0x00, 0x00,
}
