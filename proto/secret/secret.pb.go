// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/wangrenyi/kmpgo/proto/secret/secret.proto

/*
Package secret is a generated protocol buffer package.

It is generated from these files:
	github.com/wangrenyi/kmpgo/proto/secret/secret.proto

It has these top-level messages:
*/
package secret

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "github.com/wangrenyi/kmpgo/proto/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SecretInterface service

type SecretInterfaceClient interface {
	SecretCreate(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error)
	SecretUpdate(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error)
	SecretDelete(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error)
	SecretDeleteCollection(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error)
	SecretGet(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error)
	SecretList(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error)
	SecretWatch(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error)
	SecretPatch(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error)
}

type secretInterfaceClient struct {
	cc *grpc.ClientConn
}

func NewSecretInterfaceClient(cc *grpc.ClientConn) SecretInterfaceClient {
	return &secretInterfaceClient{cc}
}

func (c *secretInterfaceClient) SecretCreate(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error) {
	out := new(common.InvokeServiceResponse)
	err := grpc.Invoke(ctx, "/secret.SecretInterface/SecretCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretInterfaceClient) SecretUpdate(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error) {
	out := new(common.InvokeServiceResponse)
	err := grpc.Invoke(ctx, "/secret.SecretInterface/SecretUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretInterfaceClient) SecretDelete(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error) {
	out := new(common.InvokeServiceResponse)
	err := grpc.Invoke(ctx, "/secret.SecretInterface/SecretDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretInterfaceClient) SecretDeleteCollection(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error) {
	out := new(common.InvokeServiceResponse)
	err := grpc.Invoke(ctx, "/secret.SecretInterface/SecretDeleteCollection", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretInterfaceClient) SecretGet(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error) {
	out := new(common.InvokeServiceResponse)
	err := grpc.Invoke(ctx, "/secret.SecretInterface/SecretGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretInterfaceClient) SecretList(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error) {
	out := new(common.InvokeServiceResponse)
	err := grpc.Invoke(ctx, "/secret.SecretInterface/SecretList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretInterfaceClient) SecretWatch(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error) {
	out := new(common.InvokeServiceResponse)
	err := grpc.Invoke(ctx, "/secret.SecretInterface/SecretWatch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretInterfaceClient) SecretPatch(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error) {
	out := new(common.InvokeServiceResponse)
	err := grpc.Invoke(ctx, "/secret.SecretInterface/SecretPatch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SecretInterface service

type SecretInterfaceServer interface {
	SecretCreate(context.Context, *common.InvokeServiceRequest) (*common.InvokeServiceResponse, error)
	SecretUpdate(context.Context, *common.InvokeServiceRequest) (*common.InvokeServiceResponse, error)
	SecretDelete(context.Context, *common.InvokeServiceRequest) (*common.InvokeServiceResponse, error)
	SecretDeleteCollection(context.Context, *common.InvokeServiceRequest) (*common.InvokeServiceResponse, error)
	SecretGet(context.Context, *common.InvokeServiceRequest) (*common.InvokeServiceResponse, error)
	SecretList(context.Context, *common.InvokeServiceRequest) (*common.InvokeServiceResponse, error)
	SecretWatch(context.Context, *common.InvokeServiceRequest) (*common.InvokeServiceResponse, error)
	SecretPatch(context.Context, *common.InvokeServiceRequest) (*common.InvokeServiceResponse, error)
}

func RegisterSecretInterfaceServer(s *grpc.Server, srv SecretInterfaceServer) {
	s.RegisterService(&_SecretInterface_serviceDesc, srv)
}

func _SecretInterface_SecretCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.InvokeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretInterfaceServer).SecretCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/secret.SecretInterface/SecretCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretInterfaceServer).SecretCreate(ctx, req.(*common.InvokeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretInterface_SecretUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.InvokeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretInterfaceServer).SecretUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/secret.SecretInterface/SecretUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretInterfaceServer).SecretUpdate(ctx, req.(*common.InvokeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretInterface_SecretDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.InvokeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretInterfaceServer).SecretDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/secret.SecretInterface/SecretDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretInterfaceServer).SecretDelete(ctx, req.(*common.InvokeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretInterface_SecretDeleteCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.InvokeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretInterfaceServer).SecretDeleteCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/secret.SecretInterface/SecretDeleteCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretInterfaceServer).SecretDeleteCollection(ctx, req.(*common.InvokeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretInterface_SecretGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.InvokeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretInterfaceServer).SecretGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/secret.SecretInterface/SecretGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretInterfaceServer).SecretGet(ctx, req.(*common.InvokeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretInterface_SecretList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.InvokeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretInterfaceServer).SecretList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/secret.SecretInterface/SecretList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretInterfaceServer).SecretList(ctx, req.(*common.InvokeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretInterface_SecretWatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.InvokeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretInterfaceServer).SecretWatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/secret.SecretInterface/SecretWatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretInterfaceServer).SecretWatch(ctx, req.(*common.InvokeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretInterface_SecretPatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.InvokeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretInterfaceServer).SecretPatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/secret.SecretInterface/SecretPatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretInterfaceServer).SecretPatch(ctx, req.(*common.InvokeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SecretInterface_serviceDesc = grpc.ServiceDesc{
	ServiceName: "secret.SecretInterface",
	HandlerType: (*SecretInterfaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SecretCreate",
			Handler:    _SecretInterface_SecretCreate_Handler,
		},
		{
			MethodName: "SecretUpdate",
			Handler:    _SecretInterface_SecretUpdate_Handler,
		},
		{
			MethodName: "SecretDelete",
			Handler:    _SecretInterface_SecretDelete_Handler,
		},
		{
			MethodName: "SecretDeleteCollection",
			Handler:    _SecretInterface_SecretDeleteCollection_Handler,
		},
		{
			MethodName: "SecretGet",
			Handler:    _SecretInterface_SecretGet_Handler,
		},
		{
			MethodName: "SecretList",
			Handler:    _SecretInterface_SecretList_Handler,
		},
		{
			MethodName: "SecretWatch",
			Handler:    _SecretInterface_SecretWatch_Handler,
		},
		{
			MethodName: "SecretPatch",
			Handler:    _SecretInterface_SecretPatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/wangrenyi/kmpgo/proto/secret/secret.proto",
}

func init() {
	proto.RegisterFile("github.com/wangrenyi/kmpgo/proto/secret/secret.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 224 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0xd2, 0xc1, 0x4a, 0x03, 0x31,
	0x14, 0x05, 0x50, 0x37, 0x16, 0x7c, 0x0a, 0xc2, 0x2c, 0x5c, 0x14, 0xdd, 0xf8, 0x01, 0x13, 0x50,
	0xff, 0xa0, 0x82, 0x54, 0x2b, 0x88, 0x45, 0xba, 0x4e, 0xe3, 0x75, 0x1a, 0x3a, 0xc9, 0x8b, 0xc9,
	0x9b, 0x11, 0xff, 0xc1, 0x8f, 0x16, 0x26, 0x03, 0xba, 0x11, 0x17, 0x99, 0xd5, 0x25, 0x37, 0xdc,
	0xb3, 0x7a, 0x74, 0xd3, 0x58, 0xd9, 0x75, 0xdb, 0xda, 0xb0, 0x53, 0x1f, 0xda, 0x37, 0x11, 0xfe,
	0xd3, 0xaa, 0xbd, 0x0b, 0x0d, 0xab, 0x10, 0x59, 0x58, 0x25, 0x98, 0x08, 0x19, 0xa3, 0x1e, 0xba,
	0x6a, 0x96, 0x5f, 0xf3, 0xff, 0xd7, 0x86, 0x9d, 0x63, 0x3f, 0x46, 0x5e, 0x5f, 0x7d, 0x1d, 0xd2,
	0xe9, 0x7a, 0x00, 0x96, 0x5e, 0x10, 0xdf, 0xb4, 0x41, 0xf5, 0x48, 0x27, 0xb9, 0x5a, 0x44, 0x68,
	0x41, 0x75, 0x5e, 0x8f, 0x93, 0xa5, 0xef, 0x79, 0x8f, 0x35, 0x62, 0x6f, 0x0d, 0x9e, 0xf1, 0xde,
	0x21, 0xc9, 0xfc, 0xe2, 0x8f, 0xdf, 0x14, 0xd8, 0x27, 0x5c, 0x1e, 0xfc, 0x70, 0x2f, 0xe1, 0x75,
	0x4a, 0xee, 0x16, 0x2d, 0xca, 0xb9, 0x0d, 0x9d, 0xfd, 0xe6, 0x16, 0xdc, 0xb6, 0x30, 0x62, 0xd9,
	0x97, 0xc2, 0xf7, 0x74, 0x94, 0xe1, 0x3b, 0x48, 0xa9, 0xf5, 0x40, 0x94, 0xad, 0x95, 0x4d, 0xc5,
	0xd8, 0x8a, 0x8e, 0x33, 0xb6, 0xd1, 0x62, 0x76, 0x93, 0x69, 0x4f, 0x13, 0x68, 0xdb, 0xd9, 0x70,
	0x95, 0xd7, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xaf, 0xaa, 0xaf, 0x10, 0x0b, 0x03, 0x00, 0x00,
}
