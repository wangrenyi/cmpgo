// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/wangrenyi/kmpgo/proto/podtemplate/podtemplate.proto

/*
Package podtemplate is a generated protocol buffer package.

It is generated from these files:
	github.com/wangrenyi/kmpgo/proto/podtemplate/podtemplate.proto

It has these top-level messages:
*/
package podtemplate

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "github.com/wangrenyi/kmpgo/proto/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PodTemplateInterface service

type PodTemplateInterfaceClient interface {
	PodTemplateCreate(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error)
	PodTemplateUpdate(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error)
	PodTemplateDelete(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error)
	PodTemplateDeleteCollection(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error)
	PodTemplateGet(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error)
	PodTemplateList(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error)
	PodTemplateWatch(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error)
	PodTemplatePatch(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error)
}

type podTemplateInterfaceClient struct {
	cc *grpc.ClientConn
}

func NewPodTemplateInterfaceClient(cc *grpc.ClientConn) PodTemplateInterfaceClient {
	return &podTemplateInterfaceClient{cc}
}

func (c *podTemplateInterfaceClient) PodTemplateCreate(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error) {
	out := new(common.InvokeServiceResponse)
	err := grpc.Invoke(ctx, "/podtemplate.PodTemplateInterface/PodTemplateCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *podTemplateInterfaceClient) PodTemplateUpdate(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error) {
	out := new(common.InvokeServiceResponse)
	err := grpc.Invoke(ctx, "/podtemplate.PodTemplateInterface/PodTemplateUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *podTemplateInterfaceClient) PodTemplateDelete(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error) {
	out := new(common.InvokeServiceResponse)
	err := grpc.Invoke(ctx, "/podtemplate.PodTemplateInterface/PodTemplateDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *podTemplateInterfaceClient) PodTemplateDeleteCollection(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error) {
	out := new(common.InvokeServiceResponse)
	err := grpc.Invoke(ctx, "/podtemplate.PodTemplateInterface/PodTemplateDeleteCollection", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *podTemplateInterfaceClient) PodTemplateGet(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error) {
	out := new(common.InvokeServiceResponse)
	err := grpc.Invoke(ctx, "/podtemplate.PodTemplateInterface/PodTemplateGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *podTemplateInterfaceClient) PodTemplateList(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error) {
	out := new(common.InvokeServiceResponse)
	err := grpc.Invoke(ctx, "/podtemplate.PodTemplateInterface/PodTemplateList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *podTemplateInterfaceClient) PodTemplateWatch(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error) {
	out := new(common.InvokeServiceResponse)
	err := grpc.Invoke(ctx, "/podtemplate.PodTemplateInterface/PodTemplateWatch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *podTemplateInterfaceClient) PodTemplatePatch(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error) {
	out := new(common.InvokeServiceResponse)
	err := grpc.Invoke(ctx, "/podtemplate.PodTemplateInterface/PodTemplatePatch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PodTemplateInterface service

type PodTemplateInterfaceServer interface {
	PodTemplateCreate(context.Context, *common.InvokeServiceRequest) (*common.InvokeServiceResponse, error)
	PodTemplateUpdate(context.Context, *common.InvokeServiceRequest) (*common.InvokeServiceResponse, error)
	PodTemplateDelete(context.Context, *common.InvokeServiceRequest) (*common.InvokeServiceResponse, error)
	PodTemplateDeleteCollection(context.Context, *common.InvokeServiceRequest) (*common.InvokeServiceResponse, error)
	PodTemplateGet(context.Context, *common.InvokeServiceRequest) (*common.InvokeServiceResponse, error)
	PodTemplateList(context.Context, *common.InvokeServiceRequest) (*common.InvokeServiceResponse, error)
	PodTemplateWatch(context.Context, *common.InvokeServiceRequest) (*common.InvokeServiceResponse, error)
	PodTemplatePatch(context.Context, *common.InvokeServiceRequest) (*common.InvokeServiceResponse, error)
}

func RegisterPodTemplateInterfaceServer(s *grpc.Server, srv PodTemplateInterfaceServer) {
	s.RegisterService(&_PodTemplateInterface_serviceDesc, srv)
}

func _PodTemplateInterface_PodTemplateCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.InvokeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodTemplateInterfaceServer).PodTemplateCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/podtemplate.PodTemplateInterface/PodTemplateCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodTemplateInterfaceServer).PodTemplateCreate(ctx, req.(*common.InvokeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PodTemplateInterface_PodTemplateUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.InvokeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodTemplateInterfaceServer).PodTemplateUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/podtemplate.PodTemplateInterface/PodTemplateUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodTemplateInterfaceServer).PodTemplateUpdate(ctx, req.(*common.InvokeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PodTemplateInterface_PodTemplateDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.InvokeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodTemplateInterfaceServer).PodTemplateDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/podtemplate.PodTemplateInterface/PodTemplateDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodTemplateInterfaceServer).PodTemplateDelete(ctx, req.(*common.InvokeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PodTemplateInterface_PodTemplateDeleteCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.InvokeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodTemplateInterfaceServer).PodTemplateDeleteCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/podtemplate.PodTemplateInterface/PodTemplateDeleteCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodTemplateInterfaceServer).PodTemplateDeleteCollection(ctx, req.(*common.InvokeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PodTemplateInterface_PodTemplateGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.InvokeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodTemplateInterfaceServer).PodTemplateGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/podtemplate.PodTemplateInterface/PodTemplateGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodTemplateInterfaceServer).PodTemplateGet(ctx, req.(*common.InvokeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PodTemplateInterface_PodTemplateList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.InvokeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodTemplateInterfaceServer).PodTemplateList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/podtemplate.PodTemplateInterface/PodTemplateList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodTemplateInterfaceServer).PodTemplateList(ctx, req.(*common.InvokeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PodTemplateInterface_PodTemplateWatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.InvokeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodTemplateInterfaceServer).PodTemplateWatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/podtemplate.PodTemplateInterface/PodTemplateWatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodTemplateInterfaceServer).PodTemplateWatch(ctx, req.(*common.InvokeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PodTemplateInterface_PodTemplatePatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.InvokeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodTemplateInterfaceServer).PodTemplatePatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/podtemplate.PodTemplateInterface/PodTemplatePatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodTemplateInterfaceServer).PodTemplatePatch(ctx, req.(*common.InvokeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PodTemplateInterface_serviceDesc = grpc.ServiceDesc{
	ServiceName: "podtemplate.PodTemplateInterface",
	HandlerType: (*PodTemplateInterfaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PodTemplateCreate",
			Handler:    _PodTemplateInterface_PodTemplateCreate_Handler,
		},
		{
			MethodName: "PodTemplateUpdate",
			Handler:    _PodTemplateInterface_PodTemplateUpdate_Handler,
		},
		{
			MethodName: "PodTemplateDelete",
			Handler:    _PodTemplateInterface_PodTemplateDelete_Handler,
		},
		{
			MethodName: "PodTemplateDeleteCollection",
			Handler:    _PodTemplateInterface_PodTemplateDeleteCollection_Handler,
		},
		{
			MethodName: "PodTemplateGet",
			Handler:    _PodTemplateInterface_PodTemplateGet_Handler,
		},
		{
			MethodName: "PodTemplateList",
			Handler:    _PodTemplateInterface_PodTemplateList_Handler,
		},
		{
			MethodName: "PodTemplateWatch",
			Handler:    _PodTemplateInterface_PodTemplateWatch_Handler,
		},
		{
			MethodName: "PodTemplatePatch",
			Handler:    _PodTemplateInterface_PodTemplatePatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/wangrenyi/kmpgo/proto/podtemplate/podtemplate.proto",
}

func init() {
	proto.RegisterFile("github.com/wangrenyi/kmpgo/proto/podtemplate/podtemplate.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 234 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0xd2, 0xbf, 0x4a, 0x04, 0x31,
	0x10, 0x06, 0x70, 0x1b, 0x2d, 0x22, 0xf8, 0x67, 0xb1, 0x3a, 0xb5, 0xf1, 0x01, 0x36, 0xa0, 0xd6,
	0x36, 0x27, 0xc8, 0x81, 0xe0, 0x7a, 0x2a, 0x36, 0x36, 0xb9, 0xec, 0xe7, 0x5e, 0xb8, 0x24, 0x13,
	0x93, 0xb9, 0x13, 0x1f, 0xcd, 0xb7, 0x13, 0xd6, 0x2d, 0x82, 0x22, 0x16, 0xd9, 0x6a, 0x86, 0xef,
	0x63, 0x7e, 0xd5, 0x88, 0xab, 0xce, 0xf0, 0x72, 0xbd, 0xa8, 0x35, 0x39, 0xf9, 0xae, 0x7c, 0x17,
	0xe1, 0x3f, 0x8c, 0x5c, 0xb9, 0xd0, 0x91, 0x0c, 0x91, 0x98, 0x64, 0xa0, 0x96, 0xe1, 0x82, 0x55,
	0x8c, 0x7c, 0xaf, 0xfb, 0xb6, 0xda, 0xcd, 0xa2, 0xc9, 0xe5, 0xbf, 0x98, 0x26, 0xe7, 0xc8, 0x0f,
	0xe3, 0x9b, 0x38, 0xff, 0xdc, 0x16, 0x47, 0x0d, 0xb5, 0x8f, 0x83, 0x32, 0xf3, 0x8c, 0xf8, 0xaa,
	0x34, 0xaa, 0xb9, 0x38, 0xcc, 0xf2, 0x69, 0x84, 0x62, 0x54, 0x27, 0xf5, 0x70, 0x3c, 0xf3, 0x1b,
	0x5a, 0xe1, 0x01, 0x71, 0x63, 0x34, 0xe6, 0x78, 0x5b, 0x23, 0xf1, 0xe4, 0xf4, 0x8f, 0x36, 0x05,
	0xf2, 0x09, 0x67, 0x5b, 0x3f, 0xcc, 0xa7, 0xd0, 0x8e, 0x6e, 0x5e, 0xc3, 0xa2, 0xdc, 0x7c, 0x11,
	0xc7, 0xbf, 0xcc, 0x29, 0x59, 0x0b, 0xcd, 0x86, 0x7c, 0xa9, 0x7e, 0x27, 0xf6, 0x32, 0xfd, 0x06,
	0x5c, 0x0a, 0x36, 0x62, 0x3f, 0x03, 0x6f, 0x4d, 0x2a, 0x16, 0xef, 0xc5, 0x41, 0x26, 0x3e, 0x2b,
	0xd6, 0xcb, 0x71, 0xc9, 0x66, 0x04, 0x72, 0xb1, 0xd3, 0xbf, 0xf0, 0xc5, 0x57, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xeb, 0x8b, 0x2a, 0x54, 0x47, 0x03, 0x00, 0x00,
}
