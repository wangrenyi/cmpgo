// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/wangrenyi/kmpgo/proto/rc/rc.proto

/*
Package rc is a generated protocol buffer package.

replication controller

It is generated from these files:
	github.com/wangrenyi/kmpgo/proto/rc/rc.proto

It has these top-level messages:
*/
package rc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "github.com/wangrenyi/kmpgo/proto/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RCInterface service

type RCInterfaceClient interface {
	RCCreate(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error)
	RCUpdate(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error)
	RCUpdateStatus(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error)
	RCDelete(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error)
	RCDeleteCollection(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error)
	RCGet(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error)
	RCList(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error)
	RCWatch(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error)
	RCPatch(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error)
	RCGetScale(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error)
	RCUpdateScale(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error)
}

type rCInterfaceClient struct {
	cc *grpc.ClientConn
}

func NewRCInterfaceClient(cc *grpc.ClientConn) RCInterfaceClient {
	return &rCInterfaceClient{cc}
}

func (c *rCInterfaceClient) RCCreate(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error) {
	out := new(common.InvokeServiceResponse)
	err := grpc.Invoke(ctx, "/rc.RCInterface/RCCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rCInterfaceClient) RCUpdate(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error) {
	out := new(common.InvokeServiceResponse)
	err := grpc.Invoke(ctx, "/rc.RCInterface/RCUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rCInterfaceClient) RCUpdateStatus(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error) {
	out := new(common.InvokeServiceResponse)
	err := grpc.Invoke(ctx, "/rc.RCInterface/RCUpdateStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rCInterfaceClient) RCDelete(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error) {
	out := new(common.InvokeServiceResponse)
	err := grpc.Invoke(ctx, "/rc.RCInterface/RCDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rCInterfaceClient) RCDeleteCollection(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error) {
	out := new(common.InvokeServiceResponse)
	err := grpc.Invoke(ctx, "/rc.RCInterface/RCDeleteCollection", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rCInterfaceClient) RCGet(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error) {
	out := new(common.InvokeServiceResponse)
	err := grpc.Invoke(ctx, "/rc.RCInterface/RCGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rCInterfaceClient) RCList(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error) {
	out := new(common.InvokeServiceResponse)
	err := grpc.Invoke(ctx, "/rc.RCInterface/RCList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rCInterfaceClient) RCWatch(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error) {
	out := new(common.InvokeServiceResponse)
	err := grpc.Invoke(ctx, "/rc.RCInterface/RCWatch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rCInterfaceClient) RCPatch(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error) {
	out := new(common.InvokeServiceResponse)
	err := grpc.Invoke(ctx, "/rc.RCInterface/RCPatch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rCInterfaceClient) RCGetScale(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error) {
	out := new(common.InvokeServiceResponse)
	err := grpc.Invoke(ctx, "/rc.RCInterface/RCGetScale", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rCInterfaceClient) RCUpdateScale(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error) {
	out := new(common.InvokeServiceResponse)
	err := grpc.Invoke(ctx, "/rc.RCInterface/RCUpdateScale", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RCInterface service

type RCInterfaceServer interface {
	RCCreate(context.Context, *common.InvokeServiceRequest) (*common.InvokeServiceResponse, error)
	RCUpdate(context.Context, *common.InvokeServiceRequest) (*common.InvokeServiceResponse, error)
	RCUpdateStatus(context.Context, *common.InvokeServiceRequest) (*common.InvokeServiceResponse, error)
	RCDelete(context.Context, *common.InvokeServiceRequest) (*common.InvokeServiceResponse, error)
	RCDeleteCollection(context.Context, *common.InvokeServiceRequest) (*common.InvokeServiceResponse, error)
	RCGet(context.Context, *common.InvokeServiceRequest) (*common.InvokeServiceResponse, error)
	RCList(context.Context, *common.InvokeServiceRequest) (*common.InvokeServiceResponse, error)
	RCWatch(context.Context, *common.InvokeServiceRequest) (*common.InvokeServiceResponse, error)
	RCPatch(context.Context, *common.InvokeServiceRequest) (*common.InvokeServiceResponse, error)
	RCGetScale(context.Context, *common.InvokeServiceRequest) (*common.InvokeServiceResponse, error)
	RCUpdateScale(context.Context, *common.InvokeServiceRequest) (*common.InvokeServiceResponse, error)
}

func RegisterRCInterfaceServer(s *grpc.Server, srv RCInterfaceServer) {
	s.RegisterService(&_RCInterface_serviceDesc, srv)
}

func _RCInterface_RCCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.InvokeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RCInterfaceServer).RCCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rc.RCInterface/RCCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RCInterfaceServer).RCCreate(ctx, req.(*common.InvokeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RCInterface_RCUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.InvokeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RCInterfaceServer).RCUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rc.RCInterface/RCUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RCInterfaceServer).RCUpdate(ctx, req.(*common.InvokeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RCInterface_RCUpdateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.InvokeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RCInterfaceServer).RCUpdateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rc.RCInterface/RCUpdateStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RCInterfaceServer).RCUpdateStatus(ctx, req.(*common.InvokeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RCInterface_RCDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.InvokeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RCInterfaceServer).RCDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rc.RCInterface/RCDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RCInterfaceServer).RCDelete(ctx, req.(*common.InvokeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RCInterface_RCDeleteCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.InvokeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RCInterfaceServer).RCDeleteCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rc.RCInterface/RCDeleteCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RCInterfaceServer).RCDeleteCollection(ctx, req.(*common.InvokeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RCInterface_RCGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.InvokeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RCInterfaceServer).RCGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rc.RCInterface/RCGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RCInterfaceServer).RCGet(ctx, req.(*common.InvokeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RCInterface_RCList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.InvokeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RCInterfaceServer).RCList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rc.RCInterface/RCList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RCInterfaceServer).RCList(ctx, req.(*common.InvokeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RCInterface_RCWatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.InvokeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RCInterfaceServer).RCWatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rc.RCInterface/RCWatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RCInterfaceServer).RCWatch(ctx, req.(*common.InvokeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RCInterface_RCPatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.InvokeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RCInterfaceServer).RCPatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rc.RCInterface/RCPatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RCInterfaceServer).RCPatch(ctx, req.(*common.InvokeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RCInterface_RCGetScale_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.InvokeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RCInterfaceServer).RCGetScale(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rc.RCInterface/RCGetScale",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RCInterfaceServer).RCGetScale(ctx, req.(*common.InvokeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RCInterface_RCUpdateScale_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.InvokeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RCInterfaceServer).RCUpdateScale(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rc.RCInterface/RCUpdateScale",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RCInterfaceServer).RCUpdateScale(ctx, req.(*common.InvokeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RCInterface_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rc.RCInterface",
	HandlerType: (*RCInterfaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RCCreate",
			Handler:    _RCInterface_RCCreate_Handler,
		},
		{
			MethodName: "RCUpdate",
			Handler:    _RCInterface_RCUpdate_Handler,
		},
		{
			MethodName: "RCUpdateStatus",
			Handler:    _RCInterface_RCUpdateStatus_Handler,
		},
		{
			MethodName: "RCDelete",
			Handler:    _RCInterface_RCDelete_Handler,
		},
		{
			MethodName: "RCDeleteCollection",
			Handler:    _RCInterface_RCDeleteCollection_Handler,
		},
		{
			MethodName: "RCGet",
			Handler:    _RCInterface_RCGet_Handler,
		},
		{
			MethodName: "RCList",
			Handler:    _RCInterface_RCList_Handler,
		},
		{
			MethodName: "RCWatch",
			Handler:    _RCInterface_RCWatch_Handler,
		},
		{
			MethodName: "RCPatch",
			Handler:    _RCInterface_RCPatch_Handler,
		},
		{
			MethodName: "RCGetScale",
			Handler:    _RCInterface_RCGetScale_Handler,
		},
		{
			MethodName: "RCUpdateScale",
			Handler:    _RCInterface_RCUpdateScale_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/wangrenyi/kmpgo/proto/rc/rc.proto",
}

func init() { proto.RegisterFile("github.com/wangrenyi/kmpgo/proto/rc/rc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 250 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0xd3, 0x4f, 0x4b, 0xf4, 0x30,
	0x10, 0x06, 0xf0, 0x97, 0x17, 0xac, 0x32, 0xa2, 0x87, 0x1e, 0x17, 0xbd, 0x78, 0x96, 0x06, 0xd4,
	0x6f, 0x10, 0x71, 0x2d, 0x8a, 0x4a, 0x8a, 0x78, 0xce, 0x8e, 0x63, 0x37, 0x6c, 0x9b, 0xa9, 0xc9,
	0x74, 0xc5, 0x2f, 0xea, 0xe7, 0x11, 0xba, 0xbb, 0xde, 0xc4, 0x43, 0x72, 0x4a, 0x20, 0x79, 0x7e,
	0x3c, 0xe4, 0x0f, 0x9c, 0xb7, 0x4e, 0x96, 0xe3, 0xa2, 0x42, 0xee, 0xd5, 0x87, 0xf5, 0x6d, 0x20,
	0xff, 0xe9, 0xd4, 0xaa, 0x1f, 0x5a, 0x56, 0x43, 0x60, 0x61, 0x15, 0x50, 0x05, 0xac, 0xa6, 0x79,
	0xf9, 0x3f, 0xe0, 0xec, 0xea, 0xcf, 0x04, 0x72, 0xdf, 0xb3, 0xdf, 0x0e, 0x9b, 0xe4, 0xc5, 0x57,
	0x01, 0x87, 0x46, 0xd7, 0x5e, 0x28, 0xbc, 0x59, 0xa4, 0xb2, 0x86, 0x03, 0xa3, 0x75, 0x20, 0x2b,
	0x54, 0x9e, 0x54, 0xdb, 0xad, 0xb5, 0x5f, 0xf3, 0x8a, 0x1a, 0x0a, 0x6b, 0x87, 0x64, 0xe8, 0x7d,
	0xa4, 0x28, 0xb3, 0xd3, 0x5f, 0x56, 0xe3, 0xc0, 0x3e, 0xd2, 0xd9, 0xbf, 0x0d, 0xf5, 0x3c, 0xbc,
	0x66, 0xa0, 0x1e, 0xe1, 0x78, 0x47, 0x35, 0x62, 0x65, 0x8c, 0x59, 0xba, 0x5d, 0x53, 0x47, 0xe9,
	0xdd, 0x1a, 0x28, 0x77, 0x94, 0xe6, 0xae, 0x23, 0x14, 0xc7, 0x3e, 0x15, 0xbd, 0x81, 0x3d, 0xa3,
	0xe7, 0x24, 0xa9, 0xce, 0x1c, 0x0a, 0xa3, 0xef, 0x5d, 0x4c, 0x86, 0x6e, 0x61, 0xdf, 0xe8, 0x17,
	0x2b, 0xb8, 0xcc, 0x22, 0x3d, 0xe5, 0x90, 0xee, 0x00, 0xa6, 0x43, 0x6a, 0xd0, 0x76, 0xc9, 0xd7,
	0xf8, 0x00, 0x47, 0x3f, 0x4f, 0x2c, 0x83, 0xb7, 0x28, 0xa6, 0xff, 0x75, 0xf9, 0x1d, 0x00, 0x00,
	0xff, 0xff, 0x5c, 0x80, 0x83, 0x85, 0xc9, 0x03, 0x00, 0x00,
}
