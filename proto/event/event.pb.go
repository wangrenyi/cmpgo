// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/wangrenyi/kmpgo/proto/event/event.proto

/*
Package event is a generated protocol buffer package.

It is generated from these files:
	github.com/wangrenyi/kmpgo/proto/event/event.proto

It has these top-level messages:
*/
package event

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "github.com/wangrenyi/kmpgo/proto/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for EventInterface service

type EventInterfaceClient interface {
	EventCreate(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error)
	EventUpdate(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error)
	EventDelete(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error)
	EventDeleteCollection(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error)
	EventGet(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error)
	EventList(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error)
	EventWatch(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error)
	EventPatch(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error)
	// Event expansion
	CreateWithEventNamespace(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error)
	UpdateWithEventNamespace(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error)
	PatchWithEventNamespace(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error)
	EventSearch(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error)
	EventGetFieldSelector(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error)
}

type eventInterfaceClient struct {
	cc *grpc.ClientConn
}

func NewEventInterfaceClient(cc *grpc.ClientConn) EventInterfaceClient {
	return &eventInterfaceClient{cc}
}

func (c *eventInterfaceClient) EventCreate(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error) {
	out := new(common.InvokeServiceResponse)
	err := grpc.Invoke(ctx, "/event.EventInterface/EventCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventInterfaceClient) EventUpdate(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error) {
	out := new(common.InvokeServiceResponse)
	err := grpc.Invoke(ctx, "/event.EventInterface/EventUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventInterfaceClient) EventDelete(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error) {
	out := new(common.InvokeServiceResponse)
	err := grpc.Invoke(ctx, "/event.EventInterface/EventDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventInterfaceClient) EventDeleteCollection(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error) {
	out := new(common.InvokeServiceResponse)
	err := grpc.Invoke(ctx, "/event.EventInterface/EventDeleteCollection", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventInterfaceClient) EventGet(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error) {
	out := new(common.InvokeServiceResponse)
	err := grpc.Invoke(ctx, "/event.EventInterface/EventGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventInterfaceClient) EventList(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error) {
	out := new(common.InvokeServiceResponse)
	err := grpc.Invoke(ctx, "/event.EventInterface/EventList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventInterfaceClient) EventWatch(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error) {
	out := new(common.InvokeServiceResponse)
	err := grpc.Invoke(ctx, "/event.EventInterface/EventWatch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventInterfaceClient) EventPatch(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error) {
	out := new(common.InvokeServiceResponse)
	err := grpc.Invoke(ctx, "/event.EventInterface/EventPatch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventInterfaceClient) CreateWithEventNamespace(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error) {
	out := new(common.InvokeServiceResponse)
	err := grpc.Invoke(ctx, "/event.EventInterface/CreateWithEventNamespace", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventInterfaceClient) UpdateWithEventNamespace(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error) {
	out := new(common.InvokeServiceResponse)
	err := grpc.Invoke(ctx, "/event.EventInterface/UpdateWithEventNamespace", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventInterfaceClient) PatchWithEventNamespace(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error) {
	out := new(common.InvokeServiceResponse)
	err := grpc.Invoke(ctx, "/event.EventInterface/PatchWithEventNamespace", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventInterfaceClient) EventSearch(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error) {
	out := new(common.InvokeServiceResponse)
	err := grpc.Invoke(ctx, "/event.EventInterface/EventSearch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventInterfaceClient) EventGetFieldSelector(ctx context.Context, in *common.InvokeServiceRequest, opts ...grpc.CallOption) (*common.InvokeServiceResponse, error) {
	out := new(common.InvokeServiceResponse)
	err := grpc.Invoke(ctx, "/event.EventInterface/EventGetFieldSelector", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for EventInterface service

type EventInterfaceServer interface {
	EventCreate(context.Context, *common.InvokeServiceRequest) (*common.InvokeServiceResponse, error)
	EventUpdate(context.Context, *common.InvokeServiceRequest) (*common.InvokeServiceResponse, error)
	EventDelete(context.Context, *common.InvokeServiceRequest) (*common.InvokeServiceResponse, error)
	EventDeleteCollection(context.Context, *common.InvokeServiceRequest) (*common.InvokeServiceResponse, error)
	EventGet(context.Context, *common.InvokeServiceRequest) (*common.InvokeServiceResponse, error)
	EventList(context.Context, *common.InvokeServiceRequest) (*common.InvokeServiceResponse, error)
	EventWatch(context.Context, *common.InvokeServiceRequest) (*common.InvokeServiceResponse, error)
	EventPatch(context.Context, *common.InvokeServiceRequest) (*common.InvokeServiceResponse, error)
	// Event expansion
	CreateWithEventNamespace(context.Context, *common.InvokeServiceRequest) (*common.InvokeServiceResponse, error)
	UpdateWithEventNamespace(context.Context, *common.InvokeServiceRequest) (*common.InvokeServiceResponse, error)
	PatchWithEventNamespace(context.Context, *common.InvokeServiceRequest) (*common.InvokeServiceResponse, error)
	EventSearch(context.Context, *common.InvokeServiceRequest) (*common.InvokeServiceResponse, error)
	EventGetFieldSelector(context.Context, *common.InvokeServiceRequest) (*common.InvokeServiceResponse, error)
}

func RegisterEventInterfaceServer(s *grpc.Server, srv EventInterfaceServer) {
	s.RegisterService(&_EventInterface_serviceDesc, srv)
}

func _EventInterface_EventCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.InvokeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventInterfaceServer).EventCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.EventInterface/EventCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventInterfaceServer).EventCreate(ctx, req.(*common.InvokeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventInterface_EventUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.InvokeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventInterfaceServer).EventUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.EventInterface/EventUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventInterfaceServer).EventUpdate(ctx, req.(*common.InvokeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventInterface_EventDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.InvokeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventInterfaceServer).EventDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.EventInterface/EventDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventInterfaceServer).EventDelete(ctx, req.(*common.InvokeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventInterface_EventDeleteCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.InvokeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventInterfaceServer).EventDeleteCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.EventInterface/EventDeleteCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventInterfaceServer).EventDeleteCollection(ctx, req.(*common.InvokeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventInterface_EventGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.InvokeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventInterfaceServer).EventGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.EventInterface/EventGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventInterfaceServer).EventGet(ctx, req.(*common.InvokeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventInterface_EventList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.InvokeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventInterfaceServer).EventList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.EventInterface/EventList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventInterfaceServer).EventList(ctx, req.(*common.InvokeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventInterface_EventWatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.InvokeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventInterfaceServer).EventWatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.EventInterface/EventWatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventInterfaceServer).EventWatch(ctx, req.(*common.InvokeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventInterface_EventPatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.InvokeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventInterfaceServer).EventPatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.EventInterface/EventPatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventInterfaceServer).EventPatch(ctx, req.(*common.InvokeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventInterface_CreateWithEventNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.InvokeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventInterfaceServer).CreateWithEventNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.EventInterface/CreateWithEventNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventInterfaceServer).CreateWithEventNamespace(ctx, req.(*common.InvokeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventInterface_UpdateWithEventNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.InvokeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventInterfaceServer).UpdateWithEventNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.EventInterface/UpdateWithEventNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventInterfaceServer).UpdateWithEventNamespace(ctx, req.(*common.InvokeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventInterface_PatchWithEventNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.InvokeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventInterfaceServer).PatchWithEventNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.EventInterface/PatchWithEventNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventInterfaceServer).PatchWithEventNamespace(ctx, req.(*common.InvokeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventInterface_EventSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.InvokeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventInterfaceServer).EventSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.EventInterface/EventSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventInterfaceServer).EventSearch(ctx, req.(*common.InvokeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventInterface_EventGetFieldSelector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.InvokeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventInterfaceServer).EventGetFieldSelector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.EventInterface/EventGetFieldSelector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventInterfaceServer).EventGetFieldSelector(ctx, req.(*common.InvokeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EventInterface_serviceDesc = grpc.ServiceDesc{
	ServiceName: "event.EventInterface",
	HandlerType: (*EventInterfaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EventCreate",
			Handler:    _EventInterface_EventCreate_Handler,
		},
		{
			MethodName: "EventUpdate",
			Handler:    _EventInterface_EventUpdate_Handler,
		},
		{
			MethodName: "EventDelete",
			Handler:    _EventInterface_EventDelete_Handler,
		},
		{
			MethodName: "EventDeleteCollection",
			Handler:    _EventInterface_EventDeleteCollection_Handler,
		},
		{
			MethodName: "EventGet",
			Handler:    _EventInterface_EventGet_Handler,
		},
		{
			MethodName: "EventList",
			Handler:    _EventInterface_EventList_Handler,
		},
		{
			MethodName: "EventWatch",
			Handler:    _EventInterface_EventWatch_Handler,
		},
		{
			MethodName: "EventPatch",
			Handler:    _EventInterface_EventPatch_Handler,
		},
		{
			MethodName: "CreateWithEventNamespace",
			Handler:    _EventInterface_CreateWithEventNamespace_Handler,
		},
		{
			MethodName: "UpdateWithEventNamespace",
			Handler:    _EventInterface_UpdateWithEventNamespace_Handler,
		},
		{
			MethodName: "PatchWithEventNamespace",
			Handler:    _EventInterface_PatchWithEventNamespace_Handler,
		},
		{
			MethodName: "EventSearch",
			Handler:    _EventInterface_EventSearch_Handler,
		},
		{
			MethodName: "EventGetFieldSelector",
			Handler:    _EventInterface_EventGetFieldSelector_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/wangrenyi/kmpgo/proto/event/event.proto",
}

func init() { proto.RegisterFile("github.com/wangrenyi/kmpgo/proto/event/event.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 278 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0xd4, 0xd1, 0x4a, 0xc3, 0x30,
	0x14, 0x06, 0x60, 0x6f, 0x94, 0x79, 0x04, 0x2f, 0x06, 0xa2, 0x0c, 0xbd, 0xf1, 0x01, 0x5a, 0x98,
	0xbe, 0xc1, 0xd4, 0x51, 0x1d, 0x22, 0x16, 0x9d, 0x5e, 0x66, 0xd9, 0x6f, 0x1b, 0xd6, 0xe6, 0xd4,
	0xf4, 0xac, 0xe2, 0xa3, 0xf9, 0x76, 0xd2, 0x74, 0x13, 0x6f, 0xc4, 0x8b, 0xf4, 0xa6, 0x25, 0x27,
	0xfc, 0x1f, 0x24, 0xfc, 0x84, 0xc6, 0x99, 0x91, 0x7c, 0xbd, 0x88, 0x34, 0x97, 0xf1, 0x87, 0xb2,
	0x99, 0x83, 0xfd, 0x34, 0xf1, 0xaa, 0xac, 0x32, 0x8e, 0x2b, 0xc7, 0xc2, 0x31, 0x1a, 0x58, 0xe9,
	0xbe, 0x91, 0x9f, 0x0c, 0x77, 0xfd, 0x62, 0x74, 0xf9, 0x6f, 0x54, 0x73, 0x59, 0xb2, 0xdd, 0xfc,
	0xba, 0xf0, 0xf8, 0x6b, 0x40, 0x87, 0xd7, 0x6d, 0x3e, 0xb1, 0x02, 0xf7, 0xa6, 0x34, 0x86, 0x33,
	0x3a, 0xf0, 0x93, 0x89, 0x83, 0x12, 0x0c, 0x4f, 0xa3, 0x4d, 0x20, 0xb1, 0x0d, 0xaf, 0x90, 0xc2,
	0x35, 0x46, 0xe3, 0x11, 0xef, 0x6b, 0xd4, 0x32, 0x3a, 0xfb, 0x63, 0xb7, 0xae, 0xd8, 0xd6, 0x38,
	0xdf, 0xf9, 0xd1, 0x9e, 0xaa, 0x65, 0x8f, 0xda, 0x15, 0x0a, 0x84, 0x6b, 0xcf, 0x74, 0xf4, 0x4b,
	0x9b, 0x70, 0x51, 0x40, 0x8b, 0x61, 0x1b, 0xea, 0x26, 0x34, 0xf0, 0xee, 0x14, 0x12, 0x4a, 0xdd,
	0xd2, 0xbe, 0xa7, 0x66, 0xa6, 0x0e, 0xb6, 0xee, 0x88, 0xbc, 0x35, 0x57, 0xa2, 0xf3, 0xbe, 0xb0,
	0x87, 0x3e, 0xb0, 0x57, 0x3a, 0xe9, 0xda, 0x36, 0x37, 0x92, 0x7b, 0xf6, 0x5e, 0x95, 0xa8, 0xab,
	0xb6, 0x8e, 0xe1, 0x74, 0x57, 0xbd, 0xfe, 0xe9, 0x17, 0x3a, 0xf6, 0xa7, 0xef, 0x5f, 0xde, 0xd6,
	0x3c, 0x85, 0x72, 0xe1, 0xb7, 0xbb, 0xad, 0xf9, 0x14, 0x72, 0x63, 0x50, 0x2c, 0x53, 0xb4, 0x3d,
	0x67, 0x17, 0xe8, 0x2e, 0xf6, 0xfc, 0x13, 0x72, 0xf1, 0x1d, 0x00, 0x00, 0xff, 0xff, 0xe9, 0x3b,
	0x5f, 0x5d, 0xb5, 0x04, 0x00, 0x00,
}
